"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# Sentry Configuration
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

# Получаем DSN из переменных окружения
SENTRY_DSN = os.getenv('SENTRY_DSN')

# Инициализация Sentry только если DSN указан
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            RedisIntegration(),
        ],
        # Установите traces_sample_rate в 1.0 для отладки
        # В продакшене установите более низкое значение, например 0.1
        traces_sample_rate=float(os.getenv('SENTRY_TRACES_SAMPLE_RATE', '1.0')),
        
        # Если вы хотите отключить отправку PII (персональных данных)
        send_default_pii=os.getenv('SENTRY_SEND_DEFAULT_PII', 'True').lower() == 'true',
        
        # Настройки окружения
        environment=os.getenv('ENVIRONMENT', 'development'),
        
        # Игнорировать определенные исключения
        ignore_errors=[
            'django.security.DisallowedHost',
            'django.core.exceptions.ValidationError',
        ],
        
        # Настройки для отладки
        debug=os.getenv('DEBUG', 'True').lower() == 'true',
    )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mn0qo#r*_h-9_i5u+fvyqabp-umn+rc338)q&2a3d$+lrjn&dd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'core',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Требуется для django-allauth
    'rest_framework',
    'corsheaders',
    'django_filters',
    'silk',  # Django Silk для профилирования
    
    # Django Allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
]

MIDDLEWARE = [
    'silk.middleware.SilkyMiddleware',  # Django Silk middleware
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Django Allauth middleware
    'allauth.account.middleware.AccountMiddleware',
    
    # Sentry Middleware
    'core.middleware.SentryMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_ROOT = BASE_DIR / 'static'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

# Django Filter settings
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Django Silk Settings
SILKY_PYTHON_PROFILER = True
SILKY_PYTHON_PROFILER_MEMORY = True
SILKY_AUTHENTICATION = False  # Отключаем аутентификацию для разработки
SILKY_AUTHORISATION = False   # Отключаем авторизацию для разработки
SILKY_MAX_RECORDED_REQUESTS = 1000
SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 10
SILKY_META = True
SILKY_IGNORE_PATTERNS = [
    r'/admin/',
    r'/silk/',
    r'/static/',
    # r'/media/',  # Убираем медиа файлы из игнорируемых
]

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

# Настройки Celery
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Настройки планировщика задач (Celery Beat)
CELERY_BEAT_SCHEDULE = {
    'daily-cleanup': {
        'task': 'core.tasks.daily_cleanup',
        'schedule': 86400.0,  # 24 часа
    },
    'weekly-reports': {
        'task': 'core.tasks.weekly_reports',
        'schedule': 604800.0,  # 7 дней
    },
    'weekly-reports-email': {
        'task': 'core.tasks.send_weekly_reports_email',
        'schedule': 604800.0,  # 7 дней
    },
    'monthly-analytics': {
        'task': 'core.tasks.monthly_analytics',
        'schedule': 2592000.0,  # 30 дней
    },
    'lesson-reminders': {
        'task': 'core.tasks.send_lesson_reminders',
        'schedule': 3600.0,  # 1 час
    },
}

# Email Configuration для Mailhog
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025  # SMTP порт Mailhog
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = 'noreply@horse-stable.com'

# Django Allauth Settings
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Настройки аккаунта
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Для разработки отключаем верификацию email
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

# Настройки входа/выхода
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'

# Настройки социальных аккаунтов
SOCIALACCOUNT_PROVIDERS = {
    'yandex': {
        'APP': {
            'client_id': os.getenv('YANDEX_CLIENT_ID', ''),
            'secret': os.getenv('YANDEX_CLIENT_SECRET', ''),
            'key': ''
        },
        'SCOPE': [
            'login:info',
            'login:email',
            'login:avatar',
        ],
    }
}

# Настройки для автоматического создания пользователей
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_EMAIL_VERIFICATION = False